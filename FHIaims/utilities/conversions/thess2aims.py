#!/usr/bin/python

import sys
import optparse
import os
import array
import subprocess

USAGE = """%prog [options] [tinker.hes tinker.xyz [outfile]]

Convert a Hessian matrix from a Tinker .hes file (as generated by
"testhess.x <stem> Y N") into the format used by FHI-aims."""

def error(msg):
    sys.stderr.write(msg + "\n")
    sys.exit(2)


def read_Hessian(hesname, n_atoms):
    """Read Hessian from Tinker .hes file and return Hessian in kcal/mol A^2"""

    hesfile = open(hesname)
    N = 3*n_atoms
    Hess = array.array('d', (0. for i in xrange(N**2)))

    # === Get diagonal elements

    for line in hesfile:
        if line.strip().startswith("Diagonal Hessian Elements"):
            break
    diaglist = []
    for line in hesfile:
        if line.strip() == "" and diaglist:
            break
        diaglist.extend([float(numstr) for numstr in line.split()])
    if len(diaglist) != N:
        raise ValueError("Hessian file %s has wrong number of diagonals" %
                         hesname)

    for i_coord, value in enumerate(diaglist):
        Hess[i_coord *N+ i_coord] = value
    
    
    # === Get off-diagonal elements

    for i_atom in xrange(n_atoms):
        for i_comp, comp in enumerate(['X', 'Y', 'Z']):
            i_coord = 3*i_atom + i_comp
            for line in hesfile:
                if line.strip().startswith("Off-diagonal Hessian Elements"):
                    i_atom_file = int(line.split()[-2])
                    comp_file = line.split()[-1]
                    if i_atom_file-1 != i_atom or comp_file != comp:
                        raise ValueError("Unexpected line %s" % line.strip())
                    break
            offlist = []
            for line in hesfile:
                if line.strip() == "" and offlist:
                    break
                offlist.extend([float(numstr) for numstr in line.split()])

            if len(offlist) != N - i_coord - 1:
                raise ValueError("Wrong number of entries for %i %s" %
                                 (i_atom, comp))

            for j, value in enumerate(offlist):
                j_coord = i_coord + j + 1
                Hess[i_coord *N+ j_coord] = value
                Hess[j_coord *N+ i_coord] = value

    return Hess

CONV = 0.04339312   # kcal/mol in eV


if __name__ == "__main__":
    parser = optparse.OptionParser(usage=USAGE)

    parser.add_option("-a", "--add-unity", type=float, default = 0.005,
                      help="Add UNITY (in eV/A^2) to "
                      "final Hessian [default: 0.005]")

    options, args = parser.parse_args()

    if len(args) < 2 or len(args) > 3:
        parser.error("Wrong number of arguments")

    hesname = args[0]
    xyzname = args[1]
    if len(args) == 2:
        outname = "<stdout>"
        outfile = sys.stdout
    else:
        outname = args[2]
        outfile = open(outname, "w")

    # Get number of atoms
    xyzfile = open(xyzname)
    n_atoms = int(xyzfile.readline().split()[0])
    xyzfile.close()

    # Get Hessian
    N = 3*n_atoms
    Hess = read_Hessian(hesname, n_atoms)
    if options.add_unity > 0:
        for i_coord in xrange(N):
            Hess[i_coord *N+ i_coord] += options.add_unity

    # Write geometry
    outfile.write("# Geometry from file %s (for reference)\n" % xyzname)
    outfile.flush()
    subprocess.check_call(['txyz2aims.py', xyzname], stdout=outfile)
    outfile.flush()
    outfile.write("\n")

    # Write Hessian
    outfile.write("# Hessian from file %s\n" % hesname)

    for i_atom in xrange(n_atoms):
        for j_atom in xrange(i_atom, n_atoms):
            outlist = []
            # i should be inner for Fortran order output.
            for j in xrange(3):
                j_coord = 3*j_atom + j
                for i in xrange(3):
                    i_coord = 3*i_atom + i
                    outlist.append(Hess[i_coord *N+ j_coord])
            if (any(abs(h) > 1e-10 for h in outlist)):
                blk_str = " ".join(["%11.6f" % (num*CONV) for num in outlist])
                outfile.write("hessian_block %3i %3i   %s\n" % (
                        i_atom+1, j_atom+1, blk_str))

    outfile.write("\n")

