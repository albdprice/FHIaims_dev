# This patch adds the FHI-aims geometry.in format to openbabel.
# You can convert any format understood by babel, e.g. the
# xmakemol-xyz format to geometry.in by:
# $ babel -ixyz file.xyz -oaims geometry.in
# or the other way round:
# $ babel -iaims geometry.in -oxyz file.xyz
#
# Additionally this patch contains a kludge for a better residue
# recognition in the case of protected peptide chain ends.
#
# Build instruction:
# Put this patch file and the Openbabel distribution tarball into
# some directory and cd into it.
# $ tar xzf openbabel-2.2.3.tar.gz
# $ cd openbabel-2.2.3
# $ patch -p1 <../babel+aims.patch
# $ ./configure --help
# $ ./configure
# $ make
# $ sudo make install
diff --git a/src/chains.cpp b/src/chains.cpp
--- a/src/chains.cpp
+++ b/src/chains.cpp
@@ -969,17 +969,24 @@ namespace OpenBabel
           FOR_NBORS_OF_ATOM (nbr, &*atom) {
             unsigned int idx2 = nbr->GetIdx() - 1;
             if (resids[idx2] != 0) { // !UNK
-              resnos[idx] = resnos[idx2];
-              resids[idx] = resids[idx2];
-              changed = true;
-	      
-              bool addResidue = true;
-              for (unsigned int i = 0; i < invalidResidues.size(); ++i)
-                if ( (invalidResidues[i].first == chains[idx2]) && 
-                     (invalidResidues[i].second == resnos[idx2]) )
-                  addResidue = false;
-              if (addResidue)
-                invalidResidues.push_back(pair<char,short>(chains[idx2], resnos[idx2]));
+	      if (atomids[idx2] == AI_N || atomids[idx2] == AI_C) {
+		// bound to backbone-N/C
+		hetflags[idx] = true;
+		resids[idx] = 2; // LIG
+		atomids[idx] = -1;
+	      } else {
+		resnos[idx] = resnos[idx2];
+		resids[idx] = resids[idx2];
+		changed = true;
+
+		bool addResidue = true;
+		for (unsigned int i = 0; i < invalidResidues.size(); ++i)
+		  if ( (invalidResidues[i].first == chains[idx2]) && 
+		       (invalidResidues[i].second == resnos[idx2]) )
+		    addResidue = false;
+		if (addResidue)
+		  invalidResidues.push_back(pair<char,short>(chains[idx2], resnos[idx2]));
+	      }
             }
           }
         }
diff --git a/src/formats/CMakeLists.txt b/src/formats/CMakeLists.txt
--- a/src/formats/CMakeLists.txt
+++ b/src/formats/CMakeLists.txt
@@ -7,6 +7,7 @@ set(formats
     alchemyformat
     adfformat
     acrformat
+    aimsformat
     amberformat
     balstformat
     bgfformat
diff --git a/src/formats/Makefile.am b/src/formats/Makefile.am
--- a/src/formats/Makefile.am
+++ b/src/formats/Makefile.am
@@ -46,7 +46,7 @@ libformats_la_LIBADD = -linchi
 endif
 libformats_la_SOURCES = \
 	APIInterface.cpp MCDLformat.cpp \
-	CSRformat.cpp PQSformat.cpp alchemyformat.cpp \
+	CSRformat.cpp PQSformat.cpp aimsformat.cpp alchemyformat.cpp \
 	acrformat.cpp \
 	amberformat.cpp balstformat.cpp bgfformat.cpp boxformat.cpp \
 	cacaoformat.cpp cacheformat.cpp carformat.cpp cccformat.cpp \
@@ -93,7 +93,7 @@ endif
 
 formats_LTLIBRARIES = \
 	APIInterface.la \
-	CSRformat.la PQSformat.la MCDLformat.la alchemyformat.la \
+	CSRformat.la PQSformat.la MCDLformat.la aimsformat.la alchemyformat.la \
 	acrformat.la adfformat.la \
 	amberformat.la balstformat.la bgfformat.la boxformat.la \
 	cacaoformat.la cacheformat.la \
@@ -152,6 +152,9 @@ acrformat_la_LDFLAGS = -module -avoid-ve
 adfformat_la_SOURCES = adfformat.cpp ArrayList.c #KReader.c
 adfformat_la_LDFLAGS = -module -avoid-version -no-undefined $(win32ldflags) ../libopenbabel.la 
 
+aimsformat_la_SOURCES = aimsformat.cpp 
+aimsformat_la_LDFLAGS = -module -avoid-version -no-undefined $(win32ldflags) ../libopenbabel.la 
+
 alchemyformat_la_SOURCES = alchemyformat.cpp 
 alchemyformat_la_LDFLAGS = -module -avoid-version -no-undefined $(win32ldflags) ../libopenbabel.la 
 
diff --git a/src/formats/Makefile.in b/src/formats/Makefile.in
--- a/src/formats/Makefile.in
+++ b/src/formats/Makefile.in
@@ -127,6 +127,14 @@ adfformat_la_LINK = $(LIBTOOL) --tag=CXX
 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
 	$(CXXFLAGS) $(adfformat_la_LDFLAGS) $(LDFLAGS) -o $@
 @BUILD_SHARED_TRUE@am_adfformat_la_rpath = -rpath $(formatsdir)
+aimsformat_la_LIBADD =
+am__aimsformat_la_SOURCES_DIST = aimsformat.cpp
+@BUILD_SHARED_TRUE@am_aimsformat_la_OBJECTS = aimsformat.lo
+aimsformat_la_OBJECTS = $(am_aimsformat_la_OBJECTS)
+aimsformat_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
+	$(CXXFLAGS) $(aimsformat_la_LDFLAGS) $(LDFLAGS) -o $@
+@BUILD_SHARED_TRUE@am_aimsformat_la_rpath = -rpath $(formatsdir)
 alchemyformat_la_LIBADD =
 am__alchemyformat_la_SOURCES_DIST = alchemyformat.cpp
 @BUILD_SHARED_TRUE@am_alchemyformat_la_OBJECTS = alchemyformat.lo
@@ -431,45 +439,47 @@ jaguarformat_la_LINK = $(LIBTOOL) --tag=
 @BUILD_INCHI_TRUE@@BUILD_SHARED_FALSE@libformats_la_DEPENDENCIES =  \
 @BUILD_INCHI_TRUE@@BUILD_SHARED_FALSE@	inchi102/libinchi.la
 am__libformats_la_SOURCES_DIST = APIInterface.cpp MCDLformat.cpp \
-	CSRformat.cpp PQSformat.cpp alchemyformat.cpp acrformat.cpp \
-	amberformat.cpp balstformat.cpp bgfformat.cpp boxformat.cpp \
-	cacaoformat.cpp cacheformat.cpp carformat.cpp cccformat.cpp \
-	chem3dformat.cpp chemdrawct.cpp chemkinformat.cpp \
-	chemtoolformat.cpp cifformat.cpp copyformat.cpp crkformat.cpp \
-	cssrformat.cpp dmolformat.cpp fastsearchformat.cpp \
-	fastaformat.cpp fchkformat.cpp featformat.cpp fhformat.cpp \
-	fingerprintformat.cpp freefracformat.cpp gamessformat.cpp \
-	gaussformat.cpp gausscubeformat.cpp gausszmatformat.cpp \
-	ghemicalformat.cpp gromos96format.cpp hinformat.cpp \
-	getinchi.cpp inchiformat.cpp jaguarformat.cpp mdlformat.cpp \
-	mmcifformat.cpp mmodformat.cpp mol2format.cpp molreport.cpp \
-	mopacformat.cpp moldenformat.cpp molproformat.cpp \
-	msmsformat.cpp mpdformat.cpp mpqcformat.cpp nwchemformat.cpp \
-	outformat.cpp pcmodelformat.cpp pdbformat.cpp povrayformat.cpp \
-	pqrformat.cpp qchemformat.cpp reportformat.cpp shelxformat.cpp \
-	smilesformat.cpp thermoformat.cpp tinkerformat.cpp \
-	titleformat.cpp turbomoleformat.cpp unichemformat.cpp \
-	viewmolformat.cpp xedformat.cpp xyzformat.cpp yasaraformat.cpp \
-	zindoformat.cpp rxnformat.cpp rsmiformat.cpp
+	CSRformat.cpp PQSformat.cpp aimsformat.cpp alchemyformat.cpp \
+	acrformat.cpp amberformat.cpp balstformat.cpp bgfformat.cpp \
+	boxformat.cpp cacaoformat.cpp cacheformat.cpp carformat.cpp \
+	cccformat.cpp chem3dformat.cpp chemdrawct.cpp \
+	chemkinformat.cpp chemtoolformat.cpp cifformat.cpp \
+	copyformat.cpp crkformat.cpp cssrformat.cpp dmolformat.cpp \
+	fastsearchformat.cpp fastaformat.cpp fchkformat.cpp \
+	featformat.cpp fhformat.cpp fingerprintformat.cpp \
+	freefracformat.cpp gamessformat.cpp gaussformat.cpp \
+	gausscubeformat.cpp gausszmatformat.cpp ghemicalformat.cpp \
+	gromos96format.cpp hinformat.cpp getinchi.cpp inchiformat.cpp \
+	jaguarformat.cpp mdlformat.cpp mmcifformat.cpp mmodformat.cpp \
+	mol2format.cpp molreport.cpp mopacformat.cpp moldenformat.cpp \
+	molproformat.cpp msmsformat.cpp mpdformat.cpp mpqcformat.cpp \
+	nwchemformat.cpp outformat.cpp pcmodelformat.cpp pdbformat.cpp \
+	povrayformat.cpp pqrformat.cpp qchemformat.cpp \
+	reportformat.cpp shelxformat.cpp smilesformat.cpp \
+	thermoformat.cpp tinkerformat.cpp titleformat.cpp \
+	turbomoleformat.cpp unichemformat.cpp viewmolformat.cpp \
+	xedformat.cpp xyzformat.cpp yasaraformat.cpp zindoformat.cpp \
+	rxnformat.cpp rsmiformat.cpp
 @BUILD_SHARED_FALSE@am_libformats_la_OBJECTS = APIInterface.lo \
 @BUILD_SHARED_FALSE@	MCDLformat.lo CSRformat.lo PQSformat.lo \
-@BUILD_SHARED_FALSE@	alchemyformat.lo acrformat.lo \
-@BUILD_SHARED_FALSE@	amberformat.lo balstformat.lo bgfformat.lo \
-@BUILD_SHARED_FALSE@	boxformat.lo cacaoformat.lo cacheformat.lo \
-@BUILD_SHARED_FALSE@	carformat.lo cccformat.lo chem3dformat.lo \
-@BUILD_SHARED_FALSE@	chemdrawct.lo chemkinformat.lo \
-@BUILD_SHARED_FALSE@	chemtoolformat.lo cifformat.lo \
-@BUILD_SHARED_FALSE@	copyformat.lo crkformat.lo cssrformat.lo \
-@BUILD_SHARED_FALSE@	dmolformat.lo fastsearchformat.lo \
-@BUILD_SHARED_FALSE@	fastaformat.lo fchkformat.lo featformat.lo \
-@BUILD_SHARED_FALSE@	fhformat.lo fingerprintformat.lo \
-@BUILD_SHARED_FALSE@	freefracformat.lo gamessformat.lo \
-@BUILD_SHARED_FALSE@	gaussformat.lo gausscubeformat.lo \
-@BUILD_SHARED_FALSE@	gausszmatformat.lo ghemicalformat.lo \
-@BUILD_SHARED_FALSE@	gromos96format.lo hinformat.lo getinchi.lo \
-@BUILD_SHARED_FALSE@	inchiformat.lo jaguarformat.lo \
-@BUILD_SHARED_FALSE@	mdlformat.lo mmcifformat.lo mmodformat.lo \
-@BUILD_SHARED_FALSE@	mol2format.lo molreport.lo mopacformat.lo \
+@BUILD_SHARED_FALSE@	aimsformat.lo alchemyformat.lo \
+@BUILD_SHARED_FALSE@	acrformat.lo amberformat.lo balstformat.lo \
+@BUILD_SHARED_FALSE@	bgfformat.lo boxformat.lo cacaoformat.lo \
+@BUILD_SHARED_FALSE@	cacheformat.lo carformat.lo cccformat.lo \
+@BUILD_SHARED_FALSE@	chem3dformat.lo chemdrawct.lo \
+@BUILD_SHARED_FALSE@	chemkinformat.lo chemtoolformat.lo \
+@BUILD_SHARED_FALSE@	cifformat.lo copyformat.lo crkformat.lo \
+@BUILD_SHARED_FALSE@	cssrformat.lo dmolformat.lo \
+@BUILD_SHARED_FALSE@	fastsearchformat.lo fastaformat.lo \
+@BUILD_SHARED_FALSE@	fchkformat.lo featformat.lo fhformat.lo \
+@BUILD_SHARED_FALSE@	fingerprintformat.lo freefracformat.lo \
+@BUILD_SHARED_FALSE@	gamessformat.lo gaussformat.lo \
+@BUILD_SHARED_FALSE@	gausscubeformat.lo gausszmatformat.lo \
+@BUILD_SHARED_FALSE@	ghemicalformat.lo gromos96format.lo \
+@BUILD_SHARED_FALSE@	hinformat.lo getinchi.lo inchiformat.lo \
+@BUILD_SHARED_FALSE@	jaguarformat.lo mdlformat.lo \
+@BUILD_SHARED_FALSE@	mmcifformat.lo mmodformat.lo mol2format.lo \
+@BUILD_SHARED_FALSE@	molreport.lo mopacformat.lo \
 @BUILD_SHARED_FALSE@	moldenformat.lo molproformat.lo \
 @BUILD_SHARED_FALSE@	msmsformat.lo mpdformat.lo mpqcformat.lo \
 @BUILD_SHARED_FALSE@	nwchemformat.lo outformat.lo \
@@ -821,50 +831,51 @@ CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBT
 SOURCES = $(APIInterface_la_SOURCES) $(CSRformat_la_SOURCES) \
 	$(MCDLformat_la_SOURCES) $(PQSformat_la_SOURCES) \
 	$(acrformat_la_SOURCES) $(adfformat_la_SOURCES) \
-	$(alchemyformat_la_SOURCES) $(amberformat_la_SOURCES) \
-	$(balstformat_la_SOURCES) $(bgfformat_la_SOURCES) \
-	$(boxformat_la_SOURCES) $(cacaoformat_la_SOURCES) \
-	$(cacheformat_la_SOURCES) $(carformat_la_SOURCES) \
-	$(cccformat_la_SOURCES) $(chem3dformat_la_SOURCES) \
-	$(chemdrawcdxformat_la_SOURCES) $(chemdrawctformat_la_SOURCES) \
-	$(chemkinformat_la_SOURCES) $(chemtoolformat_la_SOURCES) \
-	$(cifformat_la_SOURCES) $(copyformat_la_SOURCES) \
-	$(crkformat_la_SOURCES) $(cssrformat_la_SOURCES) \
-	$(dmolformat_la_SOURCES) $(fastaformat_la_SOURCES) \
-	$(fastsearchformat_la_SOURCES) $(fchkformat_la_SOURCES) \
-	$(featformat_la_SOURCES) $(fhformat_la_SOURCES) \
-	$(fingerprintformat_la_SOURCES) $(freefracformat_la_SOURCES) \
-	$(gamessformat_la_SOURCES) $(gamessukformat_la_SOURCES) \
-	$(gausscubeformat_la_SOURCES) $(gaussformat_la_SOURCES) \
-	$(gausszmatformat_la_SOURCES) $(ghemicalformat_la_SOURCES) \
-	$(gromos96format_la_SOURCES) $(hinformat_la_SOURCES) \
-	$(inchiformat_la_SOURCES) $(jaguarformat_la_SOURCES) \
-	$(libformats_la_SOURCES) $(mdlformat_la_SOURCES) \
-	$(mmcifformat_la_SOURCES) $(mmodformat_la_SOURCES) \
-	$(mol2format_la_SOURCES) $(moldenformat_la_SOURCES) \
-	$(molproformat_la_SOURCES) $(molreportformat_la_SOURCES) \
-	$(mopacformat_la_SOURCES) $(mpdformat_la_SOURCES) \
-	$(mpqcformat_la_SOURCES) $(msiformat_la_SOURCES) \
-	$(msmsformat_la_SOURCES) $(nwchemformat_la_SOURCES) \
-	$(opendxformat_la_SOURCES) $(outformat_la_SOURCES) \
-	$(pcmodelformat_la_SOURCES) $(pdbformat_la_SOURCES) \
-	$(pngformat_la_SOURCES) $(povrayformat_la_SOURCES) \
-	$(pqrformat_la_SOURCES) $(qchemformat_la_SOURCES) \
-	$(reportformat_la_SOURCES) $(rsmiformat_la_SOURCES) \
-	$(rxnformat_la_SOURCES) $(shelxformat_la_SOURCES) \
-	$(smilesformat_la_SOURCES) $(thermoformat_la_SOURCES) \
-	$(tinkerformat_la_SOURCES) $(titleformat_la_SOURCES) \
-	$(turbomoleformat_la_SOURCES) $(unichemformat_la_SOURCES) \
-	$(vaspformat_la_SOURCES) $(viewmolformat_la_SOURCES) \
-	$(xedformat_la_SOURCES) $(xtcformat_la_SOURCES) \
-	$(xyzformat_la_SOURCES) $(yasaraformat_la_SOURCES) \
-	$(zindoformat_la_SOURCES)
+	$(aimsformat_la_SOURCES) $(alchemyformat_la_SOURCES) \
+	$(amberformat_la_SOURCES) $(balstformat_la_SOURCES) \
+	$(bgfformat_la_SOURCES) $(boxformat_la_SOURCES) \
+	$(cacaoformat_la_SOURCES) $(cacheformat_la_SOURCES) \
+	$(carformat_la_SOURCES) $(cccformat_la_SOURCES) \
+	$(chem3dformat_la_SOURCES) $(chemdrawcdxformat_la_SOURCES) \
+	$(chemdrawctformat_la_SOURCES) $(chemkinformat_la_SOURCES) \
+	$(chemtoolformat_la_SOURCES) $(cifformat_la_SOURCES) \
+	$(copyformat_la_SOURCES) $(crkformat_la_SOURCES) \
+	$(cssrformat_la_SOURCES) $(dmolformat_la_SOURCES) \
+	$(fastaformat_la_SOURCES) $(fastsearchformat_la_SOURCES) \
+	$(fchkformat_la_SOURCES) $(featformat_la_SOURCES) \
+	$(fhformat_la_SOURCES) $(fingerprintformat_la_SOURCES) \
+	$(freefracformat_la_SOURCES) $(gamessformat_la_SOURCES) \
+	$(gamessukformat_la_SOURCES) $(gausscubeformat_la_SOURCES) \
+	$(gaussformat_la_SOURCES) $(gausszmatformat_la_SOURCES) \
+	$(ghemicalformat_la_SOURCES) $(gromos96format_la_SOURCES) \
+	$(hinformat_la_SOURCES) $(inchiformat_la_SOURCES) \
+	$(jaguarformat_la_SOURCES) $(libformats_la_SOURCES) \
+	$(mdlformat_la_SOURCES) $(mmcifformat_la_SOURCES) \
+	$(mmodformat_la_SOURCES) $(mol2format_la_SOURCES) \
+	$(moldenformat_la_SOURCES) $(molproformat_la_SOURCES) \
+	$(molreportformat_la_SOURCES) $(mopacformat_la_SOURCES) \
+	$(mpdformat_la_SOURCES) $(mpqcformat_la_SOURCES) \
+	$(msiformat_la_SOURCES) $(msmsformat_la_SOURCES) \
+	$(nwchemformat_la_SOURCES) $(opendxformat_la_SOURCES) \
+	$(outformat_la_SOURCES) $(pcmodelformat_la_SOURCES) \
+	$(pdbformat_la_SOURCES) $(pngformat_la_SOURCES) \
+	$(povrayformat_la_SOURCES) $(pqrformat_la_SOURCES) \
+	$(qchemformat_la_SOURCES) $(reportformat_la_SOURCES) \
+	$(rsmiformat_la_SOURCES) $(rxnformat_la_SOURCES) \
+	$(shelxformat_la_SOURCES) $(smilesformat_la_SOURCES) \
+	$(thermoformat_la_SOURCES) $(tinkerformat_la_SOURCES) \
+	$(titleformat_la_SOURCES) $(turbomoleformat_la_SOURCES) \
+	$(unichemformat_la_SOURCES) $(vaspformat_la_SOURCES) \
+	$(viewmolformat_la_SOURCES) $(xedformat_la_SOURCES) \
+	$(xtcformat_la_SOURCES) $(xyzformat_la_SOURCES) \
+	$(yasaraformat_la_SOURCES) $(zindoformat_la_SOURCES)
 DIST_SOURCES = $(am__APIInterface_la_SOURCES_DIST) \
 	$(am__CSRformat_la_SOURCES_DIST) \
 	$(am__MCDLformat_la_SOURCES_DIST) \
 	$(am__PQSformat_la_SOURCES_DIST) \
 	$(am__acrformat_la_SOURCES_DIST) \
 	$(am__adfformat_la_SOURCES_DIST) \
+	$(am__aimsformat_la_SOURCES_DIST) \
 	$(am__alchemyformat_la_SOURCES_DIST) \
 	$(am__amberformat_la_SOURCES_DIST) \
 	$(am__balstformat_la_SOURCES_DIST) \
@@ -1136,7 +1147,7 @@ SUBDIRS = $(am__append_1) $(am__append_2
 @BUILD_INCHI_TRUE@@BUILD_SHARED_FALSE@libformats_la_LIBADD = inchi102/libinchi.la
 @BUILD_SHARED_FALSE@libformats_la_SOURCES = \
 @BUILD_SHARED_FALSE@	APIInterface.cpp MCDLformat.cpp \
-@BUILD_SHARED_FALSE@	CSRformat.cpp PQSformat.cpp alchemyformat.cpp \
+@BUILD_SHARED_FALSE@	CSRformat.cpp PQSformat.cpp aimsformat.cpp alchemyformat.cpp \
 @BUILD_SHARED_FALSE@	acrformat.cpp \
 @BUILD_SHARED_FALSE@	amberformat.cpp balstformat.cpp bgfformat.cpp boxformat.cpp \
 @BUILD_SHARED_FALSE@	cacaoformat.cpp cacheformat.cpp carformat.cpp cccformat.cpp \
@@ -1172,11 +1183,11 @@ SUBDIRS = $(am__append_1) $(am__append_2
 @BUILD_SHARED_TRUE@@BUILD_SHARED_UNIX_FALSE@win32ldflags = -export-symbols-regex ".*"
 @BUILD_SHARED_TRUE@@BUILD_SHARED_UNIX_TRUE@win32ldflags = 
 @BUILD_SHARED_TRUE@formats_LTLIBRARIES = APIInterface.la CSRformat.la \
-@BUILD_SHARED_TRUE@	PQSformat.la MCDLformat.la alchemyformat.la \
-@BUILD_SHARED_TRUE@	acrformat.la adfformat.la amberformat.la \
-@BUILD_SHARED_TRUE@	balstformat.la bgfformat.la boxformat.la \
-@BUILD_SHARED_TRUE@	cacaoformat.la cacheformat.la carformat.la \
-@BUILD_SHARED_TRUE@	cccformat.la chem3dformat.la \
+@BUILD_SHARED_TRUE@	PQSformat.la MCDLformat.la aimsformat.la \
+@BUILD_SHARED_TRUE@	alchemyformat.la acrformat.la adfformat.la \
+@BUILD_SHARED_TRUE@	amberformat.la balstformat.la bgfformat.la \
+@BUILD_SHARED_TRUE@	boxformat.la cacaoformat.la cacheformat.la \
+@BUILD_SHARED_TRUE@	carformat.la cccformat.la chem3dformat.la \
 @BUILD_SHARED_TRUE@	chemdrawctformat.la chemtoolformat.la \
 @BUILD_SHARED_TRUE@	cifformat.la copyformat.la crkformat.la \
 @BUILD_SHARED_TRUE@	cssrformat.la dmolformat.la \
@@ -1216,6 +1227,8 @@ SUBDIRS = $(am__append_1) $(am__append_2
 @BUILD_SHARED_TRUE@acrformat_la_LDFLAGS = -module -avoid-version -no-undefined $(win32ldflags) ../libopenbabel.la 
 @BUILD_SHARED_TRUE@adfformat_la_SOURCES = adfformat.cpp ArrayList.c #KReader.c
 @BUILD_SHARED_TRUE@adfformat_la_LDFLAGS = -module -avoid-version -no-undefined $(win32ldflags) ../libopenbabel.la 
+@BUILD_SHARED_TRUE@aimsformat_la_SOURCES = aimsformat.cpp 
+@BUILD_SHARED_TRUE@aimsformat_la_LDFLAGS = -module -avoid-version -no-undefined $(win32ldflags) ../libopenbabel.la 
 @BUILD_SHARED_TRUE@alchemyformat_la_SOURCES = alchemyformat.cpp 
 @BUILD_SHARED_TRUE@alchemyformat_la_LDFLAGS = -module -avoid-version -no-undefined $(win32ldflags) ../libopenbabel.la 
 @BUILD_SHARED_TRUE@amberformat_la_SOURCES = amberformat.cpp 
@@ -1454,6 +1467,8 @@ acrformat.la: $(acrformat_la_OBJECTS) $(
 	$(acrformat_la_LINK) $(am_acrformat_la_rpath) $(acrformat_la_OBJECTS) $(acrformat_la_LIBADD) $(LIBS)
 adfformat.la: $(adfformat_la_OBJECTS) $(adfformat_la_DEPENDENCIES) 
 	$(adfformat_la_LINK) $(am_adfformat_la_rpath) $(adfformat_la_OBJECTS) $(adfformat_la_LIBADD) $(LIBS)
+aimsformat.la: $(aimsformat_la_OBJECTS) $(aimsformat_la_DEPENDENCIES) 
+	$(aimsformat_la_LINK) $(am_aimsformat_la_rpath) $(aimsformat_la_OBJECTS) $(aimsformat_la_LIBADD) $(LIBS)
 alchemyformat.la: $(alchemyformat_la_OBJECTS) $(alchemyformat_la_DEPENDENCIES) 
 	$(alchemyformat_la_LINK) $(am_alchemyformat_la_rpath) $(alchemyformat_la_OBJECTS) $(alchemyformat_la_LIBADD) $(LIBS)
 amberformat.la: $(amberformat_la_OBJECTS) $(amberformat_la_DEPENDENCIES) 
@@ -1618,6 +1633,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/PQSformat.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/acrformat.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/adfformat.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/aimsformat.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alchemyformat.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alias.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/amberformat.Plo@am__quote@
diff --git a/src/formats/aimsformat.cpp b/src/formats/aimsformat.cpp
new file mode 100644
--- /dev/null
+++ b/src/formats/aimsformat.cpp
@@ -0,0 +1,237 @@
+/**********************************************************************
+Copyright (C) 2000 by OpenEye Scientific Software, Inc.
+Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison
+Some portions Copyright (C) 2004 by Chris Morley
+Some portions Copyright (C) 2010 by Juergen Wieferink
+ 
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation version 2 of the License.
+ 
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+***********************************************************************/
+
+#include <openbabel/babelconfig.h>
+#include <openbabel/obmolecformat.h>
+
+#include <sstream>
+
+using namespace std;
+namespace OpenBabel
+{
+
+  class FHIaimsFormat : public OBMoleculeFormat
+  {
+  public:
+    //Register this format type ID
+    FHIaimsFormat()
+    {
+      OBConversion::RegisterFormat("aims", this, "chemical/x-aims");
+    }
+
+    virtual const char* Description() //required
+    {
+      return
+        "FHI-aims geometry.in cartesian coordinates format\n"
+        "Read Options e.g. -as\n"
+        "  s  Output single bonds only\n"
+        "  b  Disable bonding entirely\n\n";
+    };
+
+    // virtual const char* SpecificationURL()
+    // {return "http://www.fhi-berlin.mpg.de/aims/";}; //optional
+
+    virtual const char* GetMIMEType() 
+    { return "chemical/x-aims"; };
+
+    //*** This section identical for most OBMol conversions ***
+    ////////////////////////////////////////////////////
+    /// The "API" interface functions
+    virtual bool ReadMolecule(OBBase* pOb, OBConversion* pConv);
+    virtual bool WriteMolecule(OBBase* pOb, OBConversion* pConv);
+  };
+  //***
+
+  //Make an instance of the format class
+  FHIaimsFormat theFHIaimsFormat;
+
+  /////////////////////////////////////////////////////////////////
+  bool FHIaimsFormat::ReadMolecule(OBBase* pOb, OBConversion* pConv)
+  {
+    OBMol* pmol = pOb->CastAndClear<OBMol>();
+    if(pmol==NULL)
+      return false;
+
+    //Define some references so we can use the old parameter names
+    istream &ifs = *pConv->GetInStream();
+    OBMol &mol = *pmol;
+    const char* title = pConv->GetTitle();
+    char buffer[BUFF_SIZE];
+
+    stringstream errorMsg;
+
+    unsigned int natoms;	// [ejk] assumed natoms could not be -ve
+
+    if (!ifs)
+      return false; // we're attempting to read past the end of the file
+
+    mol.SetTitle(title);
+    mol.BeginModify();
+    vector<string> vs;
+    vector<vector3> lattice_vectors;
+    int i = 0;
+    while (ifs.getline(buffer, BUFF_SIZE))
+      {
+	++i;
+        tokenize(vs,buffer);
+	if (vs[0] == "atom")
+	  {
+	    if (vs.size() != 5)
+	      {
+		errorMsg << "Could not read atom line #" << i << endl;
+		obErrorLog.ThrowError(__FUNCTION__,
+				      errorMsg.str(), obWarning);
+		return(false);
+	      }
+	    OBAtom *atom  = mol.NewAtom();
+	    int atomicNum = etab.GetAtomicNum(vs[4].c_str());
+	    //set atomic number, or '0' if the atom type is not recognized
+	    if (atomicNum == 0) {
+	      atomicNum = atoi(vs[0].c_str());
+	    }
+	    atom->SetAtomicNum(atomicNum);
+	    if (atomicNum == 0) // still strange
+	      atom->SetType(vs[0]);
+
+	    // Read the atom coordinates
+	    char *endptr;
+	    double x = strtod((char*)vs[1].c_str(),&endptr);
+	    if (endptr == (char*)vs[1].c_str())
+	      {
+		errorMsg << "Problems reading an FHIaims file: "
+			 << "Could not read line #" << i << "." << endl
+			 << "OpenBabel found the line '" << buffer << "'"
+			 << endl
+			 << "OpenBabel could not interpret item #2 "
+			 << "as a number.";
+
+		obErrorLog.ThrowError(__FUNCTION__, errorMsg.str() , obWarning);
+		return(false);
+	      }
+	    double y = strtod((char*)vs[2].c_str(),&endptr);
+	    if (endptr == (char*)vs[2].c_str())
+	      {
+		errorMsg << "Problems reading an FHIaims file: "
+			 << "Could not read atom line #" << i << "." << endl
+			 << "OpenBabel found the line '" << buffer << "'"
+			 << endl
+			 << "OpenBabel could not interpret item #3 "
+			 << "as a number.";
+
+		obErrorLog.ThrowError(__FUNCTION__, errorMsg.str() , obWarning);
+		return(false);
+	      }
+	    double z = strtod((char*)vs[3].c_str(),&endptr);
+	    if (endptr == (char*)vs[3].c_str())
+	      {
+		errorMsg << "Problems reading an FHIaims file: "
+			 << "Could not read atom line #" << i << "." << endl
+			 << "OpenBabel found the line '" << buffer << "'"
+			 << endl
+			 << "OpenBabel could not interpret item #3 "
+			 << "as a number.";
+
+		obErrorLog.ThrowError(__FUNCTION__, errorMsg.str() , obWarning);
+		return(false);
+	      }
+	    atom->SetVector(x,y,z); //set coordinates
+	  }
+	if (vs[0] == "lattice_vector")
+	  {
+	    if (vs.size() != 4)
+	      {
+		errorMsg << "Could not read lattice_vector in line #"
+			 << i << endl;
+		obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obWarning);
+		return(false);
+	      }
+	    float x = atof(vs[1].c_str());
+	    float y = atof(vs[2].c_str());
+	    float z = atof(vs[3].c_str());
+	    vector3 latvec (x, y, z);
+	    lattice_vectors.push_back(latvec);
+	  }
+      }
+    if (lattice_vectors.size() == 3)
+      {
+	OBUnitCell *cell = new OBUnitCell;
+	cell->SetData(lattice_vectors[0],
+		      lattice_vectors[1],
+		      lattice_vectors[2]);
+	pmol->SetData(cell);
+      }
+    else if (lattice_vectors.size() != 0)
+      {
+	errorMsg << "Invalid number of lattice_vector lines" << endl;
+	obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), obWarning);
+	return(false);
+      }
+
+    if (!pConv->IsOption("b",OBConversion::INOPTIONS))
+      mol.ConnectTheDots();
+    if (!pConv->IsOption("s",OBConversion::INOPTIONS) && !pConv->IsOption("b",OBConversion::INOPTIONS))
+      mol.PerceiveBondOrders();
+
+    mol.EndModify();
+
+    return(true);
+  }
+
+  ////////////////////////////////////////////////////////////////
+
+  bool FHIaimsFormat::WriteMolecule(OBBase* pOb, OBConversion* pConv)
+  {
+    OBMol* pmol = dynamic_cast<OBMol*>(pOb);
+    if(pmol==NULL)
+      return false;
+
+    //Define some references so we can use the old parameter names
+    ostream &ofs = *pConv->GetOutStream();
+    OBMol &mol = *pmol;
+
+    char buffer[BUFF_SIZE];
+
+    if (pmol->HasData(OBGenericDataType::UnitCell))
+      {
+        OBUnitCell *pUC = (OBUnitCell*)pmol->GetData(OBGenericDataType::UnitCell);
+	vector<vector3> lattice_vectors = pUC->GetCellVectors();
+	for (vector<vector3>::iterator iter = lattice_vectors.begin();
+	     iter != lattice_vectors.end(); ++iter)
+	  {
+	    ofs << "lattice_vector "
+		 << (*iter)[0] << " "
+		 << (*iter)[1] << " "
+		 << (*iter)[2] << endl;
+	  }
+	ofs << endl;
+      }
+
+
+    FOR_ATOMS_OF_MOL(atom, mol)
+      {
+        snprintf(buffer, BUFF_SIZE, "atom %15.5f%15.5f%15.5f %-3s\n",
+                 atom->GetX(),
+                 atom->GetY(),
+                 atom->GetZ(),
+                 etab.GetSymbol(atom->GetAtomicNum())
+		 );
+        ofs << buffer;
+      }
+
+    return(true);
+  }
+
+} //namespace OpenBabel
