!****s* FHI-aims/evaluate_pulay_dynamical_matrix_phonon_reduce_memory
!  NAME
!    evaluate_pulay_dynamical_matrix_phonon_reduce_memory
!  SYNOPSIS

subroutine evaluate_pulay_dynamical_matrix_phonon_reduce_memory& 
         ( partition_tab, & 
           n_points, n_compute_c, i_basis_index,  & 
           wave, gradient_basis_wave, & 
           index_hessian, hessian_basis_wave, & 
           H_times_psi, &  
           first_order_rho, & 
           first_order_potential, &
           H_times_gradient_psi ,  &
           dVxc_drho, &
           coords_npoints, & 
           i_q_point, j_atom, j_coord,  &
           density_matrix_compute,first_order_density_matrix_compute,  &
           energy_density_matrix_compute, first_order_energy_density_matrix_compute, &
           pulay_dynamical_matrix )

!  PURPOSE
!
!   shanghui  2015.07. change to phonon_reduce_meory
!
!  USES

  use dimensions
  use species_data
  use geometry
  use runtime_choices
  use basis 
  use pbc_lists

!  ARGUMENTS

  implicit none
  integer :: n_points
  real*8, dimension(n_points), intent(in) :: partition_tab

  integer , intent(in) :: n_compute_c
  integer , intent(in) :: i_basis_index(n_compute_c)
  real*8, dimension(n_max_compute_ham, n_points),intent(in) :: wave
  real*8, dimension(n_max_compute_ham, 3, n_points),intent(in) :: gradient_basis_wave
  real*8, dimension(n_max_compute_ham, n_points), intent(in) :: H_times_psi
  integer , intent(in) :: index_hessian(3,3)
  real*8, dimension(n_max_compute_ham,6,n_points), intent(in) :: hessian_basis_wave
   real*8, dimension(n_max_compute_ham,3,n_points), intent(in) :: H_times_gradient_psi 

  complex*16, dimension(n_points), intent(in) :: first_order_rho
  complex*16, dimension(n_points), intent(in) :: first_order_potential
  real*8, dimension(n_points), intent(in) :: dVxc_drho

  real*8, dimension(3,n_points), intent(in) :: coords_npoints
  integer , intent(in) :: i_q_point
  integer , intent(in) :: j_atom
  integer , intent(in) :: j_coord

  real*8     :: density_matrix_compute(n_compute_c,n_compute_c)
  complex*16 :: first_order_density_matrix_compute(n_compute_c,n_compute_c)

  real*8     :: energy_density_matrix_compute(n_compute_c,n_compute_c)
  complex*16 :: first_order_energy_density_matrix_compute(n_compute_c,n_compute_c)

  complex*16, dimension(3,n_atoms,3,n_atoms), intent(inout) :: pulay_dynamical_matrix
!  INPUTS
!  o  n_points -- number of grid points in this grid batch
!  o  partition_tab -- values of partition function
!  o  n_compute_c -- basis set computed at this subroutine
!  o  i_basis_index -- i_compute to i_basis
!  o  wave -- wave function in unit cell
!  o  gradient_basis_wave -- gradient wave function in unit cell
!  o  H_times_psi           -- H*psi  
!  o  first_order_rho       -- rho_tot(1)
!  o  first_order_potential -- V_free_hartree(1)+delta_V_hartree(1)
!  o  dVxc_drho             -- d Vxc/ drho
!
!  OUTPUT
!  first_order_H 


  integer :: i_compute,j_compute, i_basis,j_basis, i_basis_uc, j_basis_uc
  integer :: i_cell, j_cell
  integer :: i_point, i_place, i_coord,i_atom

  complex*16 ::  temp_first_order_S(3,n_atoms),temp_first_order_H_pulay(3,n_atoms), &
                temp_second_order_S(3,n_atoms),temp_second_order_H_pulay(3,n_atoms)


  real*8  :: Gr(3)
  complex*16  ::  exp_iqr(3)

  real*8, external :: ddot


  do i_compute=1,n_compute_c,1
     i_basis    = i_basis_index(i_compute)
     i_basis_uc = Cbasis_to_basis(i_basis)
     i_cell     = center_to_cell(Cbasis_to_center(i_basis))

  do j_compute=1,n_compute_c,1
     j_basis    = i_basis_index(j_compute)
     j_basis_uc = Cbasis_to_basis(j_basis)
     j_cell     = center_to_cell(Cbasis_to_center(j_basis))

       temp_first_order_H_pulay(1:3,1:n_atoms) = (0.0d0,0.0d0)
       temp_first_order_S(1:3,1:n_atoms) = (0.0d0,0.0d0)

       temp_second_order_H_pulay(1:3,1:n_atoms) = (0.0d0, 0.0d0)
       temp_second_order_S(1:3,1:n_atoms) = (0.0d0, 0.0d0)


       do i_point = 1, n_points, 1

           Gr(1) = ddot(3,recip_lattice_vector(1:3,1),1, coords_npoints(1:3,i_point),1)
           Gr(2) = ddot(3,recip_lattice_vector(1:3,2),1, coords_npoints(1:3,i_point),1)
           Gr(3) = ddot(3,recip_lattice_vector(1:3,3),1, coords_npoints(1:3,i_point),1)
           exp_iqr(1) = exp((0,1)*Gr(1)*k_point_list(i_q_point,1))
           exp_iqr(2) = exp((0,1)*Gr(2)*k_point_list(i_q_point,2))
           exp_iqr(3) = exp((0,1)*Gr(3)*k_point_list(i_q_point,3))


!---------------1. first_order_H_pulay---------------------------
           do i_coord = 1 ,3
            !delta(u',R3) * \int ( V(r)  d Xu'/dR3 e(iqr) e(-qR3)  Xv' ) 
            temp_first_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) = &
            temp_first_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) - &
<<<<<<< HEAD
            partition_tab(i_point)* &
=======
            partition_tab(i_point)* &                                               
>>>>>>> DFPT_phonon (24): remove '& &' to fix compile error of intel-17.
            gradient_basis_wave(i_compute,i_coord,i_point)*H_times_psi(j_compute,i_point)* &
            dconjg(k_phase(i_cell,i_q_point))* &
            exp_iqr(1)*exp_iqr(2)*exp_iqr(3)

            !delta(v',R3) * \int ( V(r) Xu' d Xv'/dR3 e(iqr) e(-qR3 ) 
            temp_first_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) = &
            temp_first_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) - &
<<<<<<< HEAD
            partition_tab(i_point)* &
=======
            partition_tab(i_point)* &                               
>>>>>>> DFPT_phonon (24): remove '& &' to fix compile error of intel-17.
            gradient_basis_wave(j_compute,i_coord,i_point)*H_times_psi(i_compute,i_point)* & 
            dconjg(k_phase(j_cell,i_q_point))* &
            exp_iqr(1)*exp_iqr(2)*exp_iqr(3)
           enddo !i_coord

!---------------2. first_order_S = d Su'v'/ d ~u^*_I(q) ---------------------------
           if(Cbasis_to_center(i_basis).ne.Cbasis_to_center(j_basis)) then ! here we use transition conservation
           do i_coord = 1 ,3
            !delta(u',R3) * \int ( d Xu'/dR3 e(iqr) e(-qR3)  Xv' ) 
            temp_first_order_S(i_coord,Cbasis_to_atom(i_basis)) = &
            temp_first_order_S(i_coord,Cbasis_to_atom(i_basis)) - &
<<<<<<< HEAD
            partition_tab(i_point)* &
=======
            partition_tab(i_point)* &                                              
>>>>>>> DFPT_phonon (24): remove '& &' to fix compile error of intel-17.
            gradient_basis_wave(i_compute,i_coord,i_point)*wave(j_compute,i_point)* &
            dconjg(k_phase(i_cell,i_q_point))* &
            exp_iqr(1)*exp_iqr(2)*exp_iqr(3)

            !delta(v',R3) * \int ( Xu' d Xv'/dR3 e(iqr) e(-qR3 ) 
            temp_first_order_S(i_coord,Cbasis_to_atom(j_basis)) = &
            temp_first_order_S(i_coord,Cbasis_to_atom(j_basis)) - &
<<<<<<< HEAD
            partition_tab(i_point)* &
=======
            partition_tab(i_point)* &                               
>>>>>>> DFPT_phonon (24): remove '& &' to fix compile error of intel-17.
            gradient_basis_wave(j_compute,i_coord,i_point)*wave(i_compute,i_point)* & 
            dconjg(k_phase(j_cell,i_q_point))* &
            exp_iqr(1)*exp_iqr(2)*exp_iqr(3)
           enddo !i_coord
           endif


!---------------3. second_order_H_pulay = d ^2  Hu'v'/ d ~u^*_I(q) d ~u_J(q)---------------------
          do i_coord = 1, 3, 1 
             !d <u'| d V / d ~u_J(q) |v'>/ d ~u^*_I(q)
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) = &
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) - &
<<<<<<< HEAD
             partition_tab(i_point)* &
=======
             partition_tab(i_point)* &                                               
>>>>>>> DFPT_phonon (24): remove '& &' to fix compile error of intel-17.
             gradient_basis_wave(i_compute,i_coord,i_point)*wave(j_compute,i_point)* &
             dconjg(k_phase(i_cell,i_q_point))* &
             exp_iqr(1)*exp_iqr(2)*exp_iqr(3)*  & 
             (first_order_potential( i_point)+ &     
              dVxc_drho(i_point)*first_order_rho(i_point))  
 
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) = &
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) - &
<<<<<<< HEAD
             partition_tab(i_point)* &
=======
             partition_tab(i_point)* &                                               
>>>>>>> DFPT_phonon (24): remove '& &' to fix compile error of intel-17.
             gradient_basis_wave(j_compute,i_coord,i_point)*wave(i_compute,i_point)* &
             dconjg(k_phase(j_cell,i_q_point))* &
             exp_iqr(1)*exp_iqr(2)*exp_iqr(3)*  & 
             (first_order_potential( i_point)+ &     
              dVxc_drho(i_point)*first_order_rho(i_point))  

           if(j_atom.eq.Cbasis_to_atom(i_basis)) then
             ! delta(u,I,J)*<d^2Xu/dRI dRJ| V | Xv>
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) =    &
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) +    &
             partition_tab(i_point)*  &
             hessian_basis_wave(i_compute,index_hessian(i_coord,j_coord),i_point)* &
             H_times_psi(j_compute,i_point)

             ! delta(v,I)delta(u,J)*<dXu/dRJ| V |dXv/dRI>
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) = &
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) + &
             partition_tab(i_point)*  &
             gradient_basis_wave(j_compute,i_coord,i_point) *       & 
             H_times_gradient_psi(i_compute,j_coord,i_point) *      & 
             dconjg(k_phase(position_in_hamiltonian(j_cell,i_cell),i_q_point))            
           endif


           if(j_atom.eq.Cbasis_to_atom(j_basis)) then
             ! delta(u,I)delta(v,J)*<dXu/dRI| V |dXv/dRk>
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) =    &
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(i_basis)) +    &
             partition_tab(i_point)*  &
             gradient_basis_wave(i_compute,i_coord,i_point) *          &
             H_times_gradient_psi(j_compute,j_coord,i_point)  *        &
             k_phase(position_in_hamiltonian(j_cell,i_cell),i_q_point)            

             ! delta(v,I,J)*<Xu | V | d^2Xv/dRJ dRI> 
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) = &
             temp_second_order_H_pulay(i_coord,Cbasis_to_atom(j_basis)) + &
             partition_tab(i_point)*  &
             hessian_basis_wave(j_compute,index_hessian(i_coord,j_coord),i_point)* &
             H_times_psi(i_compute,i_point)
           endif

          enddo !i_coord


!---------------4. second_order_S-------------------------
        if(Cbasis_to_center(i_basis).ne.Cbasis_to_center(j_basis)) then ! here we use transition conservation

          do i_coord = 1, 3, 1 

           if(j_atom.eq.Cbasis_to_atom(i_basis)) then
             ! delta(u,I,J)*<d^2Xu/dRI dRJ| Xv>
             temp_second_order_S(i_coord,Cbasis_to_atom(i_basis)) =    &
             temp_second_order_S(i_coord,Cbasis_to_atom(i_basis)) +    &
             partition_tab(i_point)*  &
             hessian_basis_wave(i_compute,index_hessian(i_coord,j_coord),i_point)* &
             wave(j_compute,i_point)

             ! delta(v,I)delta(u,J)*<dXu/dRJ |dXv/dRI>
             temp_second_order_S(i_coord,Cbasis_to_atom(j_basis)) = &
             temp_second_order_S(i_coord,Cbasis_to_atom(j_basis)) + &
             partition_tab(i_point)*  &
             gradient_basis_wave(j_compute,i_coord,i_point) *       & 
             gradient_basis_wave(i_compute,j_coord,i_point) *       &
             dconjg(k_phase(position_in_hamiltonian(j_cell,i_cell),i_q_point))            
   
           endif

           if(j_atom.eq.Cbasis_to_atom(j_basis)) then
             ! delta(u,I)delta(v,J)*<dXu/dRI  |dXv/dRk>
             temp_second_order_S(i_coord,Cbasis_to_atom(i_basis)) =     &
             temp_second_order_S(i_coord,Cbasis_to_atom(i_basis)) +    &
             partition_tab(i_point)*  &
             gradient_basis_wave(i_compute,i_coord,i_point) *          &
             gradient_basis_wave(j_compute,j_coord,i_point) *          &
             k_phase(position_in_hamiltonian(j_cell,i_cell),i_q_point)            

             ! delta(v,I,J)*<Xu |d^2Xv/dRJ dRI> 
             temp_second_order_S(i_coord,Cbasis_to_atom(j_basis)) = &
             temp_second_order_S(i_coord,Cbasis_to_atom(j_basis)) + &
             partition_tab(i_point)*  &
             hessian_basis_wave(j_compute,index_hessian(i_coord,j_coord),i_point)* &
             wave(i_compute,i_point)
           endif

          enddo !i_coord
        endif !if(i_center.ne.j_center) then

 
      enddo ! i_point


!--------------5. sum up to pulay_hessian------------------------------

    do i_coord =1, 3
    do i_atom = 1, n_atoms
       pulay_dynamical_matrix(i_coord,i_atom,j_coord,j_atom)= &
       pulay_dynamical_matrix(i_coord,i_atom,j_coord,j_atom)+ &
        !-------so we have pulay_hessian--->(1) 
        ! sum_{uv}{ dm(1)_{uv}*h_pulay(1)_{uv} }  
        ! -sum_{uv}{ edm(1)_{uv}*s(1)_{uv} }
        first_order_density_matrix_compute(i_compute,j_compute)*  &
        temp_first_order_H_pulay(i_coord,i_atom)  -   &
        first_order_energy_density_matrix_compute(i_compute,j_compute)*  &
        temp_first_order_S(i_coord,i_atom)  +  &
        !-------and the pulay_hessian   --->(2) 
        ! sum_{uv}{ dm_{uv}*h_pulay(2)_{uv} }  
        ! -sum_{uv}{ edm_{uv}*s(2)_{uv} }
        density_matrix_compute(i_compute,j_compute)* &
        temp_second_order_H_pulay(i_coord,i_atom)  - &
        energy_density_matrix_compute(i_compute,j_compute)* &
        temp_second_order_S(i_coord,i_atom)
    enddo
    enddo



  enddo  ! j_compute
  enddo  ! i_compute 


end subroutine evaluate_pulay_dynamical_matrix_phonon_reduce_memory
!******
