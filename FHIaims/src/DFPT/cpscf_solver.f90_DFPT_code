!****s* FHI-aims/cpscf_solver
!  NAME
!    cpscf_solver
!  SYNOPSIS

    subroutine cpscf_solver &
    (converged)

!  PURPOSE
!  an cpscf process.
!  USES

      use dimensions
      use timing
      use physics
      use species_data
      use localorb_io
      use geometry
      use debugmanager, only: module_is_debugged, debugprint
      implicit none

!  ARGUMENTS

      logical, intent(OUT) :: converged

!  INPUTS
!    none
!  OUTPUT
!    o  converged -- did the cpscf cycle converged or not.
!
!  AUTHOR
!    FHI-aims team, Fritz-Haber Institute of the Max-Planck-Society
!  SEE ALSO
!    Volker Blum, Ralf Gehrke, Felix Hanke, Paula Havu, Ville Havu,
!    Xinguo Ren, Karsten Reuter, and Matthias Scheffler,
!    "Ab initio simulations with Numeric Atom-Centered Orbitals: FHI-aims",
!    Computer Physics Communications (2008), submitted.
!  COPYRIGHT
!   Max-Planck-Gesellschaft zur Foerderung der Wissenschaften
!   e.V. Please note that any use of the "FHI-aims-Software" is subject to
!   the terms and conditions of the respective license agreement."
!  HISTORY
!    Release version, FHI-aims (2008).
!  SOURCE
!
      ! imported variables



      ! local variables
      character*1000 :: info_str
      logical :: below_it_limit

      character*8  :: cdate
      character*10 :: ctime
      character(*), parameter :: deffmt = '2X'


     !----shanghui begin for vib-cal-------------
     real*8, parameter:: const_u          = 1.66053886d-27         
     real*8, parameter:: const_eV         = 1.60217653d-19
     real*8, parameter:: const_c          = 299792458d0
     real*8, parameter:: const_Angstr     = 1d-10
     real*8, parameter:: gradient_dipole_factor = 4.80320577161 ! bring grad_dipole to D/Ang
     
     integer  lwork, info  
     real*8, allocatable :: workspace(:)
     real*8, allocatable :: eigenvalues(:)
     real*8, allocatable :: mass_vector(:)
     real*8, allocatable :: reduced_mass(:)
     real*8, allocatable :: frequencies(:)
     real*8, allocatable :: hessian(:,:)   
     real*8, allocatable :: gradient_dipole(:,:)
     real*8, allocatable :: gradient_dipole_internal(:,:) 
     real*8, allocatable :: infrared_intensity(:) 
     real*8   norm,buf,hessian_factor
     !----shanghui end for vib-cal----------------



      real*8, parameter:: alpha=0.2d0


  !-------------------shanghui add here------------------------------------
     real*8, allocatable :: first_order_rho(:,:,:)
     real*8, allocatable :: first_order_potential(:,:,:)
     real*8, allocatable :: first_order_rho_moving_grid(:,:,:)
     real*8, allocatable :: first_order_potential_moving_grid(:,:,:)
  !------------------shanghui end add------------------------------------- 


      ! counters

      integer :: i_spin
      integer :: i_atom
      integer :: i_basis, j_basis, i_coord,i_coord_2, i_point,i_state


      character(*), parameter :: func = 'cpscf_solver'
      
      logical first_iteration
     !shanghui------------------------------------------------------------------------
      real*8  first_order_S(3, n_atoms, n_basis,n_basis)
      real*8  first_order_U(3, n_atoms, n_basis,n_basis)
      real*8  first_order_E(3, n_atoms, n_basis)

      real*8  density_matrix(n_basis, n_basis) 
      real*8  energy_density_matrix(n_basis, n_basis) 
      real*8  first_order_density_matrix(3, n_atoms, n_basis,n_basis)
      real*8  first_order_energy_density_matrix(3, n_atoms, n_basis,n_basis)
      real*8  old_first_order_density_matrix(3, n_atoms, n_basis,n_basis)

      real*8  first_order_H(3, n_atoms, n_basis,n_basis)
      real*8  change_of_first_order_DM
      real*8  time_start,time_end
      integer  max_occ_number(n_spin)

      real*8, external :: ddot

     !shanghui------------------------------------------------------------------------

       allocate(first_order_rho(3,n_atoms,n_full_points))
       allocate(first_order_potential(3,n_atoms,n_full_points))
       allocate(first_order_rho_moving_grid(3,n_atoms,n_full_points))
       allocate (first_order_potential_moving_grid(3,n_atoms,n_full_points))

       !----shanghui begin for vib-cal-------------
       lwork=9*n_atoms
       allocate( workspace(lwork) ) 
       allocate( eigenvalues(3*n_atoms) )
       allocate( mass_vector(3*n_atoms) )
       allocate( reduced_mass(3*n_atoms) )
       allocate( frequencies(3*n_atoms) )
       allocate( hessian(3*n_atoms,3*n_atoms) )   
       allocate( gradient_dipole(3*n_atoms,3) )   
       allocate( gradient_dipole_internal(3, n_atoms*3))
       allocate(infrared_intensity(n_atoms*3))
       !----shanghui end for vib-cal-------------


      ! begin work
      number_of_loops = 0

      below_it_limit = (number_of_loops.lt.sc_iter_limit)
     
      first_iteration = .true.

   !--------------shanghui test first_order_S-------------------
     first_order_S=0.0d0  
    call integrate_first_order_S(partition_tab, l_shell_max, first_order_S)

     
   !-------shanghui begin debug_mode------
    if (module_is_debugged("DFPT")) then
      write(info_str,'(A)') '************shanghui begain first_order_S(atom1,X)****************'
      call localorb_info(info_str, use_unit,'(A)',OL_norm)

      do i_basis=1,n_basis 
       write(info_str,'(60f15.9)') (first_order_S(1,1,i_basis,j_basis),j_basis=1,n_basis )
       call localorb_info(info_str, use_unit,'(A)', OL_norm)
      enddo
      write(info_str,'(A)') '************shanghui end first_order_S****************'
      call localorb_info(info_str, use_unit,'(A)', OL_norm )
      write(info_str,'(A)') ' '
      call localorb_info(info_str, use_unit,'(A)', OL_norm )
    end if
   !-------shanghui end debug_mode------

   !--------------shanghui end test first_order_S---------------   

!     find the max_occ_number
        do i_spin = 1, n_spin, 1
            max_occ_number(i_spin) = 0
            do i_state = n_states, 1, -1
             if (dabs(occ_numbers(i_state,i_spin,1)).gt.0.d0) then
              max_occ_number(i_spin) = i_state
              exit
             endif
            enddo
        enddo

     
  !-------shanghui begin debug_mode------
   if (module_is_debugged("DFPT")) then
     write(info_str,'(A)') '-----------------------------------------------'
     call localorb_info(info_str, use_unit,'(A)',OL_norm)
     write(info_str,*) 'shanghui test n_basis,max_occ:',n_basis,max_occ_number(1)
     call localorb_info(info_str, use_unit,'(A)',OL_norm )
     write(info_str,*) 'shanghui test n_max_compute_ham',n_max_compute_ham
     call localorb_info(info_str, use_unit,'(A)',OL_norm)
     write(info_str,'(A)') '-----------------------------------------------'
     call localorb_info(info_str, use_unit,'(A)',OL_norm)
   endif  
  !-------shanghui end debug_mode------



    first_order_density_matrix=0.0d0
    old_first_order_density_matrix=0.0d0
    first_order_H=0.0d0
    first_order_U=0.0d0 
    first_order_E=0.0d0

      !----shanghui change back later for cpscf-----------
       call evaluate_first_order_DM(first_order_S,  &
             KS_eigenvector, KS_eigenvalue, occ_numbers,max_occ_number,   &
             first_order_U,old_first_order_density_matrix)

! ------------------------ self-consistency loop -------------->>
  SCF_LOOP: do while ( (.not.converged) .and.  &
  &                    below_it_limit )
        number_of_loops = number_of_loops + 1

        write(info_str,'(A)') ''
        call localorb_info(info_str, use_unit,'(A)', OL_norm  )
        write(info_str,'(A)') "--------------------------------------------------------------"
        call localorb_info(info_str, use_unit,'(A)', OL_norm  )
        
          write(info_str,'(10X,A,1X,I4)') "Begin CP-self-consistency iteration #", number_of_loops
        call localorb_info(info_str, use_unit,'(A)', OL_norm )
        
        write(info_str,'(A)') ''
        call localorb_info(info_str, use_unit,'(A)', OL_norm )
        call date_and_time(cdate, ctime)
        write(info_str,'(2X,A,A,A,A)') "Date     :  ", cdate, ", Time     :  ", ctime
        call localorb_info(info_str, use_unit,'(A)', OL_norm )
        write(info_str,'(A)') "------------------------------------------------------------"
        call localorb_info(info_str, use_unit,'(A)', OL_norm )



!---------------(1) Begin  update first_order_rho-----------------------------------
       !call cpu_time(time_start)
     if(number_of_loops.eq.1) then 
       call evaluate_first_order_DM(first_order_S,  &
             KS_eigenvector, KS_eigenvalue, occ_numbers,max_occ_number,   &
             first_order_U,first_order_density_matrix)
     endif

         !shanghui: we need to perform density matrix mixing here
    
          change_of_first_order_DM =0.0d0         

         do i_basis = 1,n_basis
         do j_basis = 1,n_basis

            do i_atom = 1,n_atoms
 
            do i_coord = 1,3
         change_of_first_order_DM =                &
         max( change_of_first_order_DM,             &
         dabs(first_order_density_matrix(i_coord,i_atom,i_basis,j_basis)  &
         - old_first_order_density_matrix(i_coord,i_atom,i_basis,j_basis)) )
         
         first_order_density_matrix(i_coord,i_atom,i_basis,j_basis) =       &
         (1.0d0-alpha)*old_first_order_density_matrix(i_coord,i_atom,i_basis,j_basis)+  &
         alpha*first_order_density_matrix(i_coord,i_atom,i_basis,j_basis)
     
         old_first_order_density_matrix(i_coord,i_atom,i_basis,j_basis) =   &
         first_order_density_matrix(i_coord,i_atom,i_basis,j_basis)
            enddo

            enddo
       
         enddo
         enddo

        !-------shanghui begin debug_mode------
       if (module_is_debugged("DFPT")) then
        write(info_str,'(A)') "((((((((((((((((((((((((((((((((("
        call localorb_info(info_str, use_unit,'(A)', OL_norm)
        write(info_str,*) change_of_first_order_DM
        call localorb_info(info_str, use_unit,'(A)', OL_norm)
        write(info_str,'(A)') ")))))))))))))))))))))))))))))))))"
        call localorb_info(info_str, use_unit,'(A)', OL_norm)
       endif
        !-------shanghui end debug_mode--------

        write(info_str,'(A)') ''
        call localorb_info(info_str, use_unit,'(A)', OL_norm  )

        write(info_str,'(2X,A)') &
        "CPSCF convergence accuracy:"
        call localorb_info(info_str, use_unit,'(A)', OL_norm  )
        write(info_str,'(2X,A,1X,E10.4,1X,E10.4)') &
                "| Change of first_order_density_matrix     :", change_of_first_order_DM
        call localorb_info(info_str, use_unit,'(A)', OL_norm  )


!-------------(1) end first-order-density update and mixing--------


!  ------------(2)begain to calculate first_order_H-----------------
 
        call integrate_first_order_rho(partition_tab, l_shell_max,  &
             KS_eigenvector(:,:,1,1),first_order_density_matrix,max_occ_number, &
             first_order_rho,first_order_rho_moving_grid)

        do i_atom=1,n_atoms
           do i_coord=1,3

        call update_hartree_potential_p2_shanghui &
            ( hartree_partition_tab,first_order_rho(i_coord,i_atom,1:n_full_points),& 
            delta_v_hartree_part_at_zero, &
            delta_v_hartree_deriv_l0_at_zero, &
            multipole_moments, multipole_radius_sq, &
            l_hartree_max_far_distance, &
            outer_potential_radius )

        !-------shanghui begin debug_mode------
       if (module_is_debugged("DFPT")) then
         write(info_str,'(A)') '{----shanghui in cpscf_solver.f:-----for first_order_hartree_potential:'
         call localorb_info(info_str, use_unit,'(A)',OL_norm)
         write(info_str,*) 'i_coord,i_atom',i_coord,i_atom,forces_on
         call localorb_info(info_str, use_unit,'(A)',OL_norm)
         write(info_str,'(A)') '----shanghui in cpscf_solver.f:-----for first_order_hartree_potential}'
         call localorb_info(info_str, use_unit,'(A)',OL_norm)
       endif
        !-------shanghui end debug_mode--------

        call sum_up_whole_potential_p2_shanghui &
                ( delta_v_hartree_part_at_zero, &
                delta_v_hartree_deriv_l0_at_zero, multipole_moments, &
                partition_tab, first_order_rho(i_coord,i_atom,1:n_full_points), &
                first_order_potential(i_coord,i_atom,1:n_full_points),  & !<--------get first_order_DM_potential
                .false., multipole_radius_sq, &
                l_hartree_max_far_distance, &
                outer_potential_radius)

           enddo
        enddo

   call  integrate_first_order_H &
        (hartree_potential,first_order_potential, rho, rho_gradient,&
        partition_tab, l_shell_max, &
        KS_eigenvector(:,:,1,1),first_order_density_matrix,max_occ_number, &
        first_order_H &
       )

        !-------shanghui begin debug_mode------

      if (module_is_debugged("DFPT")) then
        if(myid.eq.0) then
        write(info_str,'(A)') '************shanghui begain first_order_H(atom1,X)****************'
         call localorb_info(info_str, use_unit,'(A)', OL_norm)
         do i_basis=1,n_basis
         write(info_str,'(60f15.9)') (first_order_H(1,1,i_basis,j_basis),j_basis=1,n_basis )
         call localorb_info(info_str, use_unit,'(A)', OL_norm)
         enddo
        write(info_str,'(A)') '************shanghui end first_order_H****************'
        call localorb_info(info_str, use_unit,'(A)' , OL_norm )
        write(info_str,'(A)') ''
        call localorb_info(info_str, use_unit,'(A)', OL_norm)
        endif
      endif
        !-------shanghui end debug_mode--------

! ------------(2) end to calculate first_order_H-----------------

        first_iteration = .false.



!--------------(3) begin to calculate first_order_U-----------------

        call cpu_time(time_start) 
        call evaluate_first_order_C(first_order_H, first_order_S,  &
             KS_eigenvector, KS_eigenvalue, occ_numbers,  max_occ_number, &
             first_order_density_matrix)
        call cpu_time(time_end) 
        write(use_unit,*) '@@@@@@@@time for DFPT-DM1@@@@@@@@@@@@@@@@@@',time_end-time_start

        !call cpu_time(time_end)
        !write(use_unit,*) '@@@@@@@@time for CPSCF@@@@@@@@@@@@@@@@@@',time_end-time_start
!--------------(3) end solve first_order_U problem----------------


! --------- Check convergence ----->>

!         Check convergence.
!         Continue with density update and new Hartree potential.
!         Get total energy pieces for next iteration.


!         check convergence of self-consistency loop
         

        converged = (change_of_first_order_DM.lt.1.0d-6).and.(number_of_loops.gt.1) 

!  ---------- Update electron density and perform mixing ---->>

        if (converged) then
!           We are done - no further evaluation of density / potential needed

          write(info_str,'(A)') ''
          call localorb_info(info_str, use_unit,'(A)',OL_norm)
          write(info_str,'(2X,A)') "CP-self-consistency cycle converged."
          call localorb_info(info_str, use_unit,'(A)',OL_norm)
          write(info_str,'(A)') ''
          call localorb_info(info_str, use_unit,'(A)',OL_norm)
 


        else if (number_of_loops.ge.sc_iter_limit) then
!           This was the last self-consistency cycle - we do not need any more potential / density evaluations

          below_it_limit = .false.
        end if


        ! current SCF loop ends here

! ----- Printing out time data -- >>


! << ---- end printing out data---------


!       this is the end of the self-consistency cycle.

  end do SCF_LOOP
! << ------ end self consistent cycle--------

      total_number_of_loops = total_number_of_loops + number_of_loops


   !---------begin Hessian calculation-------------
         density_matrix=0.0d0
         first_order_density_matrix=0.0d0
         energy_density_matrix=0.0d0
         first_order_energy_density_matrix=0.0d0

   call  evaluate_first_zero_order_DM_EDM( first_order_S,first_order_H,  &
         KS_eigenvector, KS_eigenvalue, occ_numbers, max_occ_number,  &
         first_order_U,density_matrix,first_order_density_matrix, &
         energy_density_matrix,first_order_energy_density_matrix)

       !----shanghui begin first_order_potential_moving_grid------
       do i_atom=1,n_atoms
           do i_coord=1,3
 
        call update_hartree_potential_p2_shanghui &
            ( hartree_partition_tab,first_order_rho_moving_grid(i_coord,i_atom,1:n_full_points),& 
            delta_v_hartree_part_at_zero, &
            delta_v_hartree_deriv_l0_at_zero, &
            multipole_moments, multipole_radius_sq, &
            l_hartree_max_far_distance, &
            outer_potential_radius )

        call sum_up_whole_potential_p2_shanghui &
                ( delta_v_hartree_part_at_zero, &
                delta_v_hartree_deriv_l0_at_zero, multipole_moments, &
                partition_tab, first_order_rho(i_coord,i_atom,1:n_full_points), &
                first_order_potential_moving_grid(i_coord,i_atom,1:n_full_points),  & 
                .false., multipole_radius_sq, &
                l_hartree_max_far_distance, &
                outer_potential_radius)
          enddo 
        enddo 
!-------------------shanghui end first_order_potential_moving_grid------


   call integrate_hessian &
     ( hartree_potential, first_order_potential, & 
       first_order_potential_moving_grid,  &
       rho, rho_gradient,  &
       partition_tab, partition_deriv_delley , l_shell_max,     &
       KS_eigenvector(:,:,1,1),       &
       density_matrix, first_order_density_matrix,  & 
       energy_density_matrix, first_order_energy_density_matrix,  &
       max_occ_number, &
       hessian, gradient_dipole &
     )

   !---------end Hessian calculation-------------

   !---------begin vib calculation---------------

        !-------shanghui begin parallel------
        if(myid.eq.0) then

        write(info_str,'(A)') ''
        call localorb_info(info_str, use_unit,'(A)', OL_norm)
        write(info_str,'(A)') 'Get frequencies in cpscf.f90:'
        call localorb_info(info_str, use_unit,'(A)', OL_norm)
        hessian_factor   = const_eV/(const_u*const_Angstr*const_Angstr)


      do i_atom=1, n_atoms 
        do i_coord = 1, 3
        mass_vector(3*i_atom+i_coord-3) = 1.0d0/dsqrt(species_m(species(i_atom)))
        end do
      end do

    do i_coord = 1, 3*n_atoms, 1   
       hessian(:,i_coord) = hessian(:,i_coord)*mass_vector(i_coord)       
       hessian(i_coord,:) = hessian(i_coord,:)*hessian_factor*mass_vector(i_coord) 
   end do
    
    do i_coord = 1, 3*n_atoms
       do i_coord_2 = 1, i_coord - 1 
          buf = (hessian(i_coord_2,i_coord)+hessian(i_coord,i_coord_2))/2d0
          hessian(i_coord_2,i_coord) = buf
          hessian(i_coord,i_coord_2) = buf
       end do
    end do

    write(info_str,'(A)') 'Solving eigenvalue system for Hessian Matrix'
    call localorb_info(info_str, use_unit,'(A)', OL_norm)
    call DSYEV('V','U',3*n_atoms,hessian,3*n_atoms,eigenvalues,workspace,lwork,info)
    write(info_str,'(A)') 'Done ... '
    call localorb_info(info_str, use_unit,'(A)', OL_norm)
    write(info_str,'(A)') ''
    call localorb_info(info_str, use_unit,'(A)', OL_norm)
    
    ! calculate the eigenvectors in cartesian coordinates ?
    do i_coord = 1, 3*n_atoms
       hessian(:,i_coord) = hessian(:,i_coord)*mass_vector(:)
    end do


!---------------------begin for IR intensity--------------------------------------   
    gradient_dipole(:,:) = gradient_dipole(:,:) * gradient_dipole_factor
    ! transform dipole derivative to internal coordinates via directional derivative
    ! d/dQ = d/dR * Q_normalized, where Q_normalized is nothing but displacement eigenvector
    ! hessian(:,:) not normalized anymore since mass was divided out
    do i_coord = 1, 3
       ! loop over modes
       do i_coord_2 = 1, 3*n_atoms
          gradient_dipole_internal(i_coord, i_coord_2) = ddot(3*n_atoms, gradient_dipole(:, i_coord), 1, hessian(:, i_coord_2), 1)
       end do
    end do

    ! get infrared intensities
    do i_coord = 1, 3*n_atoms, 1
       infrared_intensity(i_coord) = ddot(3, gradient_dipole_internal(:, i_coord), 1, gradient_dipole_internal(:, i_coord), 1)
    end do

    ! scale infrared intensities
    infrared_intensity(:) = infrared_intensity(:)  !* ir_factor
!---------------------end for IR intensity--------------------------------------   

 
    ! Renormalize eigenvectors for output - norm has units of 1/sqrt(mass) though 
    do i_coord = 1, 3*n_atoms
      reduced_mass(i_coord) = ddot(3*n_atoms, hessian(:, i_coord), 1, hessian(:, i_coord), 1)
      norm = sqrt(reduced_mass(i_coord))
      hessian(:,i_coord) = hessian(:,i_coord)/norm
    end do

    write(info_str,'(A)') 'DFPT-Results: '
    call localorb_info(info_str, use_unit,'(A)', OL_norm)
    write(info_str,'(A)') ''
    call localorb_info(info_str, use_unit,'(A)', OL_norm)
    write(info_str,'(A)') 'List of all frequencies found:'
    call localorb_info(info_str, use_unit,'(A)', OL_norm)
    write(info_str,'(A13,A25,A27)') 'Mode number','Frequency [cm^(-1)]','IR-intensity [D^2/Ang^2]'
    call localorb_info(info_str, use_unit,'(A)', OL_norm)

    do i_coord = 1, 3*n_atoms, 1
       if (eigenvalues(i_coord).gt.0d0) then
          frequencies(i_coord) = sqrt(eigenvalues(i_coord))
       else if (eigenvalues(i_coord).lt.0d0) then
          frequencies(i_coord) = -sqrt(-eigenvalues(i_coord))
       else 
          frequencies(i_coord) = 0d0
       end if

       write(info_str, '(I13,F25.8,F27.8)') i_coord, frequencies(i_coord)/(200*pi*const_c),infrared_intensity(i_coord)
       call localorb_info(info_str, use_unit,'(A)', OL_norm)
    enddo

        endif 
        !-------shanghui end parallel--------


      ! Perform any post-processing that is required after every scf cycle:
      ! * scaled ZORA, if required
      ! * output of a band structure
      ! * Direct calculation of a binding energy
      !
      !!! Please add any other postprocessing right here in the future !!!

!      require_post_prc = ( (flag_rel.eq.REL_zora) .and. (force_potential.eq.0) ) &
!                         .or. out_band .or. use_qmmm &
!                         .or. out_hirshfeld .or. out_hirshfeld_iterative &
!                         .or. use_vdw_correction_hirshfeld &
!                         .or. use_ll_vdwdf.or. flag_compute_kinetic .or. use_meta_gga &
!                         .or. use_nlcorr_post .or. use_vdw_post
!
!      
!      if (require_post_prc) then
!      end if


       deallocate(first_order_rho)
       deallocate(first_order_potential)
       deallocate(first_order_rho_moving_grid)
       deallocate(first_order_potential_moving_grid)

       !----shanghui begin for vib-cal-------------
       deallocate( workspace )
       deallocate( eigenvalues )
       deallocate( mass_vector )
       deallocate( reduced_mass )
       deallocate( frequencies )
       deallocate( hessian )
       deallocate( gradient_dipole)
       deallocate( gradient_dipole_internal)
       deallocate(infrared_intensity)

       !----shanghui end for vib-cal-------------



    end subroutine cpscf_solver
!******
