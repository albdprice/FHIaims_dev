#  Emacs, this is: -*- mode: makefile -*-
#
#  Makefile for FHI-aims, VB / aims team, 2004-2009
#
#  This Makefile works with GNU make. NOTE that on some proprietary platforms,
#  different versions of the ancient Unix make may not work - in that case, please
#  install GNU make - if it's not already there as "gmake".
#
#  MANDATORY REQUIREMENTS:
#
#  To build FHI-aims on your own architecture, you will need to adapt at 
#  least the paths given below, possibly more. Minimal third-party requirements 
#  are: 
#
#  - A working Fortran compiler (e.g., a recent version of Intel's ifort; 
#    alternatively, the free g95 compiler, which however generates significantly 
#    slower code).
#
#  - a Lapack implementation (e.g., www.netlib.org/lapack)
#  - a working Basic Linear Algebra Subroutine (BLAS) implementation for your
#    system.
#
#  BLAS and Lapack routines alike are, e.g., distributed with Intel's Math Kernel Library (mkl). 
#  Alternatively, outstanding BLAS implementations exist and can be built using the free ATLAS
#  or Goto libraries.
#
#  OPTIONAL REQUIREMENTS:
#
#  - Simple parallelism is supported through MPI; an appropriate free implementation is
#    mpich2, which must be set up on your system. Most commercial supercomputer architectures
#    ship their own MPI implementation, which should be documented locally.
#
#  - In addition, ScaLapack support (parallel eigenvalue solver) can be enabled IF a version 
#    of ScaLapack and a version of the Basic Linear Algebra Communication subroutines (BLACS) 
#    exist on your system. It is not necessary to have ScaLapack support in order to run in 
#    parallel. However, if not already available, ScaLapack and BLACS can be built with very
#    reasonable effort from the versions distributed at www.netlib.org.
#
#  **** This version of the Makefile enables support for the CUBA Monte Carlo
#    integration library, to which we can link as an external dependency. This
#    is a requirement for the present implementation of the Langreth-Lundqvist
#    van der Waals functional, courtesy of Claudia Ambrosch-Draxl's group and
#    linked into FHI-aims by Mina Yoon. 
#
#    Note that you must have installed and compiled the CUBA 3D integration
#    library for this purpose, which is a separate, LGPL-licensed free
#    software package, e.g., found here:
#    http://www.feynarts.de/cuba/
#    The present version is tested for version 1.5 of the package.
#
#  **** Please refer to the documentation for more information.
#


#############################################################################################
#
#  Following: Settings to be customized by the user - three examples provided.
#
#  In general, you will need to:
#
#  1) Adjust the AIMSVERSION version stamp
#
#  2) Adjust the Compiler / architecture specific variable list immediately following
#
#  3) Possibly, adapt one of the make targets (further below) for your needs.
#
#  All other settings (version stamp, modules, subroutines, generic make targets) are included 
#  through a file Makefile.backend. With the exception of the version stamp, these should not
#  usually concern you.
#
#  Note that the very end of Makefile.backend lists some additional make targets that are 
#  not connected to the main aims binary at all, but instead independent utilities
#  for postprocessing (vibrations, phonons).
#
#############################################################################################


# MANDATORY Compiler- / architecture-specific parameters:
# YOU MUST ADJUST ALL THESE SETTINGS TO MATCH YOUR SPECIFIC COMPUTER PLATFORM.
# Uncomment ONLY ONE of the example lists below to 
#
# FC           : Fortran compiler
# FFLAGS       : Compiler flags for f77-style fixed-format subroutines
# F90FLAGS     : Compiler flags for f90-style free-format subroutines
# ARCHITECTURE : Allows to add any absolutely unavoidable architecture-specific choices at compile time
#                by changing a few simple options. Presently, the allowed choices are:
#                * BlueGene_P
#                * Alpha
#                * PGI (for the Portland Group Compiler)
#                * Generic (default which should work for all other architectures).
#                Any other choice (including no choice at all) will always fall back to the
#                "Generic" choice. See the interim comment below for more information.
# LAPACKBLAS   : Compile path and libraries that hold Lapack and BLAS subroutines
# USE_MPI      : Either "yes" or "no", depending on whether MPI is used or not.
#                The value of this variable effects the defaults of several internal variables.
# MPIFC        : When compiling WITH    MPI    support, this is the MPI compiler.
# SCALAPACK    : When compiling WITH Scalapack support, these are the ScaLapack and BLACS Libraries.
# CUBA       : This is the location of the CUBA Library for Monte Carlo integration

# NOTE on the recent change of the ARCHITECTURE keyword above:
#
#                The ARCHITECTURE tag allows to specify compile-time choices for specific architectures.
#                Please be very careful with ever adding anything architecture-specific to the code.
#                As a rule, the same FHI-aims source code should normally run on any platform, and
#                this has worked very well in the past. There are a very few cases where a specific
#                Fortran compiler will really not understand an essential construct, or where an
#                architecture-specific hack is so beneficial that we prefer it anyway (BlueGene) -
#                but again, in principle this should be the absolute exception, and all changes
#                should be kept as simple as possible.

# NOTE: Consult your compiler manual to find out whether any optimization flags beyond these listed 
#       below will be helpful for YOUR specific compiler and computer system. If so, they should be 
#       included in FFLAGS and F90FLAGS, respectively.
#
#
#
#
#
# First example: ifort, mkl, serial mode
#
# The corresponding make target is "make cuba.serial" .
#
# FC = ifort
# FFLAGS = -O3 -fp-model precise
# F90FLAGS = $(FFLAGS)
# ARCHITECTURE = Generic
# LAPACKBLAS = -L/opt/intel/mkl/9.0/lib/em64t/ -lmkl_lapack -lmkl -lguide -lpthread
# USE_MPI = no
# CUBA = -L/home/yoon/lib -lcuba_1.6 -lm
#
# End first example

# Second example: ifort, mkl, MPI build without ScaLapack.
#
# The corresponding make target is "make cuba.mpi" .
#
# FC = ifort
# FFLAGS = -O3 -ip  -module $(MODDIR)-fp-model precise
# F90FLAGS = $(FFLAGS)
# ARCHITECTURE = Generic
# LAPACKBLAS = -mkl
# USE_MPI = yes
# MPIFC = mpif90
# CUBA = -L/home/yoon/lib -lcuba_1.6 -lm
#
# End second example

# Third example: ifort, mkl, MPI build WITH ScaLapack.
#
# The corresponding make target is "make scalapack.cuba.mpi" .
#
# FC = ifort
# FFLAGS = -O3 -ip -xO -module $(MODDIR)-fp-model precise
# F90FLAGS = $(FFLAGS)
# ARCHITECTURE = Generic
# LAPACKBLAS = -L/opt/intel/Compiler/11.1/046/mkl/lib/em64t/ \
#   -I/opt/intel/Compiler/11.1/046/mkl/include/em64t/lp64 -lmkl_intel_lp64 \
#   -lmkl_sequential -lmkl_core -lpthread
# USE_MPI = yes
# MPIFC = mpif90
# SCALAPACK = -L/opt/intel/Compiler/11.1/046/mkl/lib/em64t/ \
#   -I/opt/intel/Compiler/11.1/046/mkl/include/em64t/lp64 -lmkl_scalapack_lp64 \
#   -lmkl_blacs_openmpi_lp64
# CUBA = -L/home/yoon/lib -lcuba_1.6 -lm
#
# End third example

####################################################################################################
# SPECIAL PURPOSE (low level) variables
#
# In general, you will not need to bother with the following variables
# explicitly because sensible defaults should be chosen from your above
# settings.
#
# ARCH       : Use this file instead of arch_generic.f90 for compiler-specific
#              code.
#
# ELPA_KERNEL: If different from the generic elpa2_kernels.f90, a drop-in
#              replacement for it which should be highly optimized to the
#              host system (e.g. Blue Gene).
#
# LDFLAGS    : Flags passed (only) to the linker.
#
# CBFLAGS    : Used along with FFLAGS; probably meant to be set from the
#              command line  "make CBFLAGS='-check bounds'".  Depricated.
#
# MPIF       : Defaults to "-I./external" for USE_MPI=no and is used to
#              make our mpif.h stub available to the compiler.  Depending
#              on the compiler, "-I" might need to be replaced.
#
# BINDIR     : Directory for compiled and linked binaries [../bin]
#
# BUILDDIR   : Default directory for compiled object and module files [.]
#
# OBJDIR     : Directory for compiled object files [$(BUILDDIR)]
#
# MODDIR     : Directory for compiled module headers [$(BUILDDIR)]
#
# AUTODEPEND : If active, automatically check for dependencies among
#              the modules.  This allows for parallel compiling (make -j 4)
#              and saves from having to do "make clean" after every tiny
#              change. Default: "yes".
#
# AUTODEPEND_TYPE : There are two different dependency generators, one written
#                   in perl, the other in python.  The latter does some
#                   additional checks but is less portable. Either "perl" or
#                   "python".  Default: "perl".
#
################################################################################################################
#  This is where the backend should be included for all generic settings
#
  include Makefile.backend
#
################################################################################################################
#
#  Modules must always be compiled before files which use them.  In the
#  default setting, there is a hard coded sequence in which the files are
#  compiled.  After each (nontrivial) change to a module file, the only save
#  way to build is to recompile after a "make clean".  After a "make depend",
#  make is aware of the module dependencies and it should be safe to just
#  run "make <target>" even after changes to module files.  This has the
#  additional advantage that one can use parallel builds via "make -j <np>".
#
#  But do not forget to rerun "make depend" or at least "make clean" after
#  adding new files or changing "use" clauses.  And do not forget to add new
#  files to Makefile.backend, either.  You can check for the need to "make
#  depend" on every make invocation by adding "AUTODEPEND = yes" to your
#  configuration.
#
################################################################################################################


#************************************************************************
#
# All platform-independent definitions, compilation etc follow here ...
#
#************************************************************************

# Make targets - potentially, you may need to adapt one of these targets for your own needs.

cuba.serial: $(BINDIR)/aims.$(AIMSVERSION).cuba.serial.x

cuba.mpi: $(BINDIR)/aims.$(AIMSVERSION).cuba.mpi.x

scalapack.cuba.mpi: $(BINDIR)/aims.$(AIMSVERSION).scalapack.cuba.mpi.x

# Following are the actual compilation options for the above make targets.

$(BINDIR)/aims.$(AIMSVERSION).cuba.serial.x: $(OBJDIR)/write_version_stamp.o $(MODULES) $(OBJDIR)/aims.o $(OBJDIR)/main.o $(SUBROUTINES) $(EXTERNAL) $(ANACON) $(MPI_STUBS) $(SCALAPACK_STUBS) $(METIS_STUB) $(C_FILES_STUBS) $(SHM_STUBS) $(PLUMED_STUB) $(PARSER_STUBS) $(IPI_STUBS) $(HDF5_STUBS)
	@mkdir -p $(dir $@)
	$(FC) $(FFLAGS) $(CBFLAGS) $(LDFLAGS) -o $@ \
              $(OBJDIR)/write_version_stamp.o $(OBJDIR)/aims.o $(OBJDIR)/main.o $(SUBROUTINES) $(MODULES) $(EXTERNAL) $(ANACON) $(LAPACKBLAS) $(MPI_STUBS) $(SCALAPACK_STUBS) $(METIS_STUB) $(CUBA) $(C_FILES_STUBS) $(SHM_STUBS) $(PLUMED_STUB) $(PARSER_STUBS) $(IPI_STUBS) $(HDF5_STUBS)
	@echo "Built $@."

$(BINDIR)/aims.$(AIMSVERSION).cuba.mpi.x: $(OBJDIR)/write_version_stamp.o $(MODULES) $(OBJDIR)/aims.o $(OBJDIR)/main.o $(SUBROUTINES) $(EXTERNAL) $(ANACON) $(METIS_STUB) $(SCALAPACK_STUBS) $(C_FILES_STUBS) $(SHM_STUBS) $(PLUMED_STUB) $(PARSER_STUBS) $(IPI_STUBS) $(HDF5_STUBS)
	@mkdir -p $(dir $@)
	$(MPIFC) $(FFLAGS) $(CBFLAGS) $(LDFLAGS) -o $@ \
              $(OBJDIR)/write_version_stamp.o $(OBJDIR)/aims.o $(OBJDIR)/main.o $(SUBROUTINES) $(MODULES) $(EXTERNAL) $(ANACON) $(METIS_STUB) $(SCALAPACK_STUBS) $(LAPACKBLAS) $(CUBA) $(C_FILES_STUBS) $(SHM_STUBS) $(PLUMED_STUB) $(PARSER_STUBS) $(IPI_STUBS) $(HDF5_STUBS)
	@echo "Built $@."

$(BINDIR)/aims.$(AIMSVERSION).scalapack.cuba.mpi.x: $(OBJDIR)/write_version_stamp.o $(MODULES) $(OBJDIR)/aims.o $(OBJDIR)/main.o $(SUBROUTINES) $(EXTERNAL) $(ANACON) $(METIS_STUB) $(C_FILES_STUBS) $(SHM_STUBS) $(PLUMED_STUB) $(PARSER_STUBS) $(IPI_STUBS) $(HDF5_STUBS)
	@mkdir -p $(dir $@)
	$(MPIFC) $(FFLAGS) $(CBFLAGS) $(LDFLAGS) -o $@ \
              $(OBJDIR)/write_version_stamp.o $(OBJDIR)/aims.o $(OBJDIR)/main.o $(SUBROUTINES) $(MODULES) $(ANACON) $(EXTERNAL) $(METIS_STUB) $(SCALAPACK) $(LAPACKBLAS) $(CUBA) $(C_FILES_STUBS) $(SHM_STUBS) $(PLUMED_STUB) $(PARSER_STUBS) $(IPI_STUBS)
	@echo "Built $@."
